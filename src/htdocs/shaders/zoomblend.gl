/*
 * This file is part of the Nokia WebCL project.
 *
 * This Source Code Form is subject to the terms of the
 * Mozilla Public License, v. 2.0. If a copy of the MPL
 * was not distributed with this file, You can obtain
 * one at http://mozilla.org/MPL/2.0/.
 *
 * The Original Contributor of this Source Code Form is
 * Nokia Research Tampere (http://webcl.nokiaresearch.com).
 */

/**
 * Zooming and blending fragment shader. Displays a selected area of a
 * texture, blended with another texture according to a separate blend
 * mask texture.
 *
 * The area to display is specified as a "zoom window", with scale
 * factors and offsets in X and Y.  The scale factors are given in
 * texture coordinates divided by texture width and height (this
 * avoids a division in the fragment shader); the offsets are directly
 * in texture coordinates.
 *
 * For example, to display the upper-left quadrant of the image, the X
 * and Y scale factors would be 0.5/width and 0.5/height, and the
 * offsets 0.0 for X and 0.5 for Y, where width and height are the
 * dimensions of the source texture in pixels.
 *
 * Optionally, a thumbnail of the whole image can be rendered into the
 * lower left corner of the framebuffer.  The size of the thumbnail is
 * given in pixels in `resolution.zw`. If the size is zero, no
 * thumbnail is drawn.
 *
 * @param {uniform sampler2D} src the first source texture
 * @param {uniform sampler2D} src2 the second source texture
 * @param {uniform sampler2D} mask the mask texture for blending src & src2
 * @param {uniform bool} invertMask `true` to invert the mask alpha values
 * @param {uniform vec4} resolution full resolution in .xy, thumbnail in .zw
 * @param {uniform vec4} zoom the area of the texture to display, specified
 *        as scale factors in zoom.xy and the bottom-left corner in zoom.zw
 *
 * @author Tomi Aarnio, 2010-
 */

precision mediump float;

uniform sampler2D src;
uniform sampler2D src2;
uniform sampler2D mask;
uniform bool invertMask;
uniform vec4 resolution;
uniform vec4 zoom;

void main(void)
{

  vec2 tc = gl_FragCoord.xy * zoom.xy + zoom.zw;
  vec3 clr1 = texture2D(src, tc).rgb;
  vec3 clr2 = texture2D(src2, tc).rgb;
  float alpha = texture2D(mask, tc).r;
  alpha = invertMask ? 1.0-alpha : alpha;
  vec3 newColor = mix(clr1, clr2, alpha);

  // When zoomed in far enough, display a thumbnail of the full image
  // in the lower-left corner of the canvas. NB! This does not work
  // on IE11 and is not terribly useful anyway, so it's disabled for
  // the time being.

  /*
  if (gl_FragCoord.x < resolution.z && gl_FragCoord.y < resolution.w) {
  //bool inside = false;
    vec2 zoomWindowSize = zoom.xy * resolution.xy;
    vec2 zoomWindowLL = zoom.zw;
    vec2 zoomWindowUR = zoomWindowLL + zoomWindowSize;
    if (zoomWindowSize.x < 0.9 || zoomWindowSize.y < 0.9) {
      tc = gl_FragCoord.xy / resolution.zw;
      inside = all(bvec4(greaterThan(tc, zoomWindowLL), lessThan(tc, zoomWindowUR)));
      newColor = inside ? vec3(1.0)-newColor : newColor;   // film negative style
    }
  }
  */

  gl_FragColor = vec4(newColor, 1.0);
}
